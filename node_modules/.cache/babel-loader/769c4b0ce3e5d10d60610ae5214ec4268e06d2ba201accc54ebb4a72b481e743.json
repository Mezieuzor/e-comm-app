{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { renderPathForWeight } from '../lib/index.esm.js';\nimport IconBase from '../lib/IconBase.esm.js';\n\n/* GENERATED FILE */\nvar pathsByWeight = /*#__PURE__*/new Map();\npathsByWeight.set(\"bold\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M32,160V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V160\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"200\",\n    x2: \"240\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"polyline\", {\n    points: \"120 200 120 160 184 160 184 200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }));\n});\npathsByWeight.set(\"duotone\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"120\",\n    y: \"168\",\n    width: \"64\",\n    height: \"32\",\n    opacity: \"0.2\"\n  }), React.createElement(\"path\", {\n    d: \"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"200\",\n    x2: \"240\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"polyline\", {\n    points: \"120 200 120 168 184 168 184 200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\npathsByWeight.set(\"fill\", function () {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M240,192h-8V56a16,16,0,0,0-16-16H40A16,16,0,0,0,24,56V192H16a8,8,0,0,0,0,16H240a8,8,0,0,0,0-16Zm-40,0H128V176a8,8,0,0,1,8-8h56a8,8,0,0,1,8,8Z\"\n  }));\n});\npathsByWeight.set(\"light\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"200\",\n    x2: \"240\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"polyline\", {\n    points: \"120 200 120 168 184 168 184 200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }));\n});\npathsByWeight.set(\"thin\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"200\",\n    x2: \"240\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"polyline\", {\n    points: \"120 200 120 168 184 168 184 200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }));\n});\npathsByWeight.set(\"regular\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"200\",\n    x2: \"240\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"polyline\", {\n    points: \"120 200 120 168 184 168 184 200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\nvar renderPath = function renderPath(weight, color) {\n  return renderPathForWeight(weight, color, pathsByWeight);\n};\nvar ChalkboardSimple = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(IconBase, Object.assign({\n    ref: ref\n  }, props, {\n    renderPath: renderPath\n  }));\n});\nChalkboardSimple.displayName = \"ChalkboardSimple\";\nexport default ChalkboardSimple;","map":{"version":3,"names":["pathsByWeight","Map","set","color","React","createElement","Fragment","d","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","x1","y1","x2","y2","points","x","y","width","height","opacity","renderPath","weight","renderPathForWeight","ChalkboardSimple","forwardRef","props","ref","IconBase","Object","assign","displayName"],"sources":["/home/hpproc640/e-commerce-shopping-cart-app/node_modules/phosphor-react/src/icons/ChalkboardSimple.tsx"],"sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <path\n      d=\"M32,160V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"16\"\n      y1=\"200\"\n      x2=\"240\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <polyline\n      points=\"120 200 120 160 184 160 184 200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <rect x=\"120\" y=\"168\" width=\"64\" height=\"32\" opacity=\"0.2\" />\n    <path\n      d=\"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"16\"\n      y1=\"200\"\n      x2=\"240\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"120 200 120 168 184 168 184 200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M240,192h-8V56a16,16,0,0,0-16-16H40A16,16,0,0,0,24,56V192H16a8,8,0,0,0,0,16H240a8,8,0,0,0,0-16Zm-40,0H128V176a8,8,0,0,1,8-8h56a8,8,0,0,1,8,8Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <path\n      d=\"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"16\"\n      y1=\"200\"\n      x2=\"240\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <polyline\n      points=\"120 200 120 168 184 168 184 200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <path\n      d=\"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"16\"\n      y1=\"200\"\n      x2=\"240\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <polyline\n      points=\"120 200 120 168 184 168 184 200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <path\n      d=\"M32,168V56a8,8,0,0,1,8-8H216a8,8,0,0,1,8,8V168\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"16\"\n      y1=\"200\"\n      x2=\"240\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"120 200 120 168 184 168 184 200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst ChalkboardSimple = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nChalkboardSimple.displayName = \"ChalkboardSimple\";\n\nexport default ChalkboardSimple;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}